// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package processor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PdfProcessorClient is the client API for PdfProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PdfProcessorClient interface {
	// Convert the pages of a PDF file to images.
	//
	// Convert the pages of a PDF file to images.
	ConvertPdfToImage(ctx context.Context, in *Pdf, opts ...grpc.CallOption) (PdfProcessor_ConvertPdfToImageClient, error)
	RotateImage(ctx context.Context, in *Rotate, opts ...grpc.CallOption) (*Image, error)
}

type pdfProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewPdfProcessorClient(cc grpc.ClientConnInterface) PdfProcessorClient {
	return &pdfProcessorClient{cc}
}

func (c *pdfProcessorClient) ConvertPdfToImage(ctx context.Context, in *Pdf, opts ...grpc.CallOption) (PdfProcessor_ConvertPdfToImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &PdfProcessor_ServiceDesc.Streams[0], "/processor.PdfProcessor/ConvertPdfToImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &pdfProcessorConvertPdfToImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PdfProcessor_ConvertPdfToImageClient interface {
	Recv() (*Image, error)
	grpc.ClientStream
}

type pdfProcessorConvertPdfToImageClient struct {
	grpc.ClientStream
}

func (x *pdfProcessorConvertPdfToImageClient) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pdfProcessorClient) RotateImage(ctx context.Context, in *Rotate, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/processor.PdfProcessor/RotateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PdfProcessorServer is the server API for PdfProcessor service.
// All implementations must embed UnimplementedPdfProcessorServer
// for forward compatibility
type PdfProcessorServer interface {
	// Convert the pages of a PDF file to images.
	//
	// Convert the pages of a PDF file to images.
	ConvertPdfToImage(*Pdf, PdfProcessor_ConvertPdfToImageServer) error
	RotateImage(context.Context, *Rotate) (*Image, error)
	mustEmbedUnimplementedPdfProcessorServer()
}

// UnimplementedPdfProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedPdfProcessorServer struct {
}

func (UnimplementedPdfProcessorServer) ConvertPdfToImage(*Pdf, PdfProcessor_ConvertPdfToImageServer) error {
	return status.Errorf(codes.Unimplemented, "method ConvertPdfToImage not implemented")
}
func (UnimplementedPdfProcessorServer) RotateImage(context.Context, *Rotate) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateImage not implemented")
}
func (UnimplementedPdfProcessorServer) mustEmbedUnimplementedPdfProcessorServer() {}

// UnsafePdfProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PdfProcessorServer will
// result in compilation errors.
type UnsafePdfProcessorServer interface {
	mustEmbedUnimplementedPdfProcessorServer()
}

func RegisterPdfProcessorServer(s grpc.ServiceRegistrar, srv PdfProcessorServer) {
	s.RegisterService(&PdfProcessor_ServiceDesc, srv)
}

func _PdfProcessor_ConvertPdfToImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pdf)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PdfProcessorServer).ConvertPdfToImage(m, &pdfProcessorConvertPdfToImageServer{stream})
}

type PdfProcessor_ConvertPdfToImageServer interface {
	Send(*Image) error
	grpc.ServerStream
}

type pdfProcessorConvertPdfToImageServer struct {
	grpc.ServerStream
}

func (x *pdfProcessorConvertPdfToImageServer) Send(m *Image) error {
	return x.ServerStream.SendMsg(m)
}

func _PdfProcessor_RotateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rotate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdfProcessorServer).RotateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/processor.PdfProcessor/RotateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdfProcessorServer).RotateImage(ctx, req.(*Rotate))
	}
	return interceptor(ctx, in, info, handler)
}

// PdfProcessor_ServiceDesc is the grpc.ServiceDesc for PdfProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PdfProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "processor.PdfProcessor",
	HandlerType: (*PdfProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RotateImage",
			Handler:    _PdfProcessor_RotateImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConvertPdfToImage",
			Handler:       _PdfProcessor_ConvertPdfToImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "processor.proto",
}
