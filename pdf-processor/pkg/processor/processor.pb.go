// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/processor.proto

package processor

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Image struct {
	Format               string   `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d1e44a64503f34, []int{0}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *Image) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type Pdf struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pdf) Reset()         { *m = Pdf{} }
func (m *Pdf) String() string { return proto.CompactTextString(m) }
func (*Pdf) ProtoMessage()    {}
func (*Pdf) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d1e44a64503f34, []int{1}
}

func (m *Pdf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pdf.Unmarshal(m, b)
}
func (m *Pdf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pdf.Marshal(b, m, deterministic)
}
func (m *Pdf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pdf.Merge(m, src)
}
func (m *Pdf) XXX_Size() int {
	return xxx_messageInfo_Pdf.Size(m)
}
func (m *Pdf) XXX_DiscardUnknown() {
	xxx_messageInfo_Pdf.DiscardUnknown(m)
}

var xxx_messageInfo_Pdf proto.InternalMessageInfo

func (m *Pdf) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type Rotate struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	Degree               float64  `protobuf:"fixed64,2,opt,name=Degree,proto3" json:"Degree,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rotate) Reset()         { *m = Rotate{} }
func (m *Rotate) String() string { return proto.CompactTextString(m) }
func (*Rotate) ProtoMessage()    {}
func (*Rotate) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d1e44a64503f34, []int{2}
}

func (m *Rotate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rotate.Unmarshal(m, b)
}
func (m *Rotate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rotate.Marshal(b, m, deterministic)
}
func (m *Rotate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rotate.Merge(m, src)
}
func (m *Rotate) XXX_Size() int {
	return xxx_messageInfo_Rotate.Size(m)
}
func (m *Rotate) XXX_DiscardUnknown() {
	xxx_messageInfo_Rotate.DiscardUnknown(m)
}

var xxx_messageInfo_Rotate proto.InternalMessageInfo

func (m *Rotate) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Rotate) GetDegree() float64 {
	if m != nil {
		return m.Degree
	}
	return 0
}

type Document struct {
	Title                string      `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Documents            []*Document `protobuf:"bytes,10,rep,name=Documents,proto3" json:"Documents,omitempty"`
	Pages                []*Image    `protobuf:"bytes,11,rep,name=Pages,proto3" json:"Pages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Document) Reset()         { *m = Document{} }
func (m *Document) String() string { return proto.CompactTextString(m) }
func (*Document) ProtoMessage()    {}
func (*Document) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d1e44a64503f34, []int{3}
}

func (m *Document) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Document.Unmarshal(m, b)
}
func (m *Document) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Document.Marshal(b, m, deterministic)
}
func (m *Document) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Document.Merge(m, src)
}
func (m *Document) XXX_Size() int {
	return xxx_messageInfo_Document.Size(m)
}
func (m *Document) XXX_DiscardUnknown() {
	xxx_messageInfo_Document.DiscardUnknown(m)
}

var xxx_messageInfo_Document proto.InternalMessageInfo

func (m *Document) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Document) GetDocuments() []*Document {
	if m != nil {
		return m.Documents
	}
	return nil
}

func (m *Document) GetPages() []*Image {
	if m != nil {
		return m.Pages
	}
	return nil
}

func init() {
	proto.RegisterType((*Image)(nil), "processor.Image")
	proto.RegisterType((*Pdf)(nil), "processor.Pdf")
	proto.RegisterType((*Rotate)(nil), "processor.Rotate")
	proto.RegisterType((*Document)(nil), "processor.Document")
}

func init() { proto.RegisterFile("api/processor.proto", fileDescriptor_79d1e44a64503f34) }

var fileDescriptor_79d1e44a64503f34 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x4f, 0x83, 0x40,
	0x10, 0xc5, 0xbb, 0x36, 0xa0, 0x0c, 0xf5, 0x4f, 0xb7, 0xc6, 0x90, 0x5e, 0x24, 0x1c, 0x0c, 0xa7,
	0xaa, 0xe8, 0xa5, 0x1e, 0xa5, 0x31, 0xf1, 0xb6, 0xd9, 0xf4, 0xe4, 0x6d, 0x2d, 0x03, 0x69, 0x14,
	0x96, 0x2c, 0xab, 0x17, 0x3f, 0x96, 0x5f, 0xd0, 0xc0, 0x82, 0xa0, 0xd6, 0xe3, 0xdb, 0xf9, 0xbd,
	0x99, 0x9d, 0x37, 0x30, 0x13, 0xe5, 0xf6, 0xb2, 0x54, 0x72, 0x83, 0x55, 0x25, 0xd5, 0xa2, 0x54,
	0x52, 0x4b, 0xea, 0x7c, 0x3f, 0x04, 0x4b, 0xb0, 0x1e, 0x73, 0x91, 0x21, 0x3d, 0x03, 0xfb, 0x41,
	0xaa, 0x5c, 0x68, 0x8f, 0xf8, 0x24, 0x74, 0x78, 0xab, 0xa8, 0x07, 0xfb, 0xb1, 0x2c, 0x34, 0x16,
	0xda, 0xdb, 0xf3, 0x49, 0x38, 0xe1, 0x9d, 0x0c, 0xce, 0x61, 0xcc, 0x92, 0x74, 0x08, 0x90, 0x9f,
	0xc0, 0x1d, 0xd8, 0x5c, 0x6a, 0xa1, 0xf1, 0x7f, 0xa6, 0x1e, 0xbb, 0xc2, 0x4c, 0x21, 0x36, 0xdd,
	0x09, 0x6f, 0x55, 0xf0, 0x01, 0x07, 0x2b, 0xb9, 0x79, 0xcb, 0x6b, 0xe6, 0x14, 0xac, 0xf5, 0x56,
	0xbf, 0x62, 0xfb, 0x33, 0x23, 0xe8, 0x35, 0x38, 0x1d, 0x51, 0x79, 0xe0, 0x8f, 0x43, 0x37, 0x9a,
	0x2d, 0xfa, 0x4d, 0xbb, 0x1a, 0xef, 0x29, 0x7a, 0x01, 0x16, 0x13, 0x19, 0x56, 0x9e, 0xdb, 0xe0,
	0x27, 0x03, 0xbc, 0x09, 0x81, 0x9b, 0x72, 0xf4, 0x49, 0x60, 0xc2, 0x92, 0x94, 0x75, 0x55, 0xba,
	0x84, 0x69, 0x2c, 0x8b, 0x77, 0x54, 0x9a, 0x25, 0xe9, 0x5a, 0x9a, 0xc4, 0x8e, 0x06, 0x76, 0x96,
	0xa4, 0xf3, 0x3f, 0xed, 0x82, 0xd1, 0x15, 0xa1, 0xb7, 0xe0, 0x9a, 0x10, 0x8c, 0x69, 0x3a, 0x80,
	0xcc, 0xfb, 0x2e, 0x1f, 0x8d, 0xc0, 0x89, 0x15, 0x0a, 0x8d, 0x75, 0xc2, 0xbb, 0xd6, 0x9a, 0xff,
	0x9a, 0x1e, 0x8c, 0xee, 0x8f, 0x9f, 0x0e, 0xcb, 0x97, 0xac, 0x3f, 0xf6, 0xb3, 0xdd, 0x5c, 0xfb,
	0xe6, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x69, 0xf5, 0x7b, 0x53, 0x04, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PdfProcessorClient is the client API for PdfProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PdfProcessorClient interface {
	// Convert the pages of a PDF file to images.
	ConvertPdfToImage(ctx context.Context, in *Pdf, opts ...grpc.CallOption) (PdfProcessor_ConvertPdfToImageClient, error)
	// Rotate an image
	RotateImage(ctx context.Context, in *Rotate, opts ...grpc.CallOption) (*Image, error)
	// Create a Pdf
	CreatePdf(ctx context.Context, in *Document, opts ...grpc.CallOption) (*Pdf, error)
}

type pdfProcessorClient struct {
	cc *grpc.ClientConn
}

func NewPdfProcessorClient(cc *grpc.ClientConn) PdfProcessorClient {
	return &pdfProcessorClient{cc}
}

func (c *pdfProcessorClient) ConvertPdfToImage(ctx context.Context, in *Pdf, opts ...grpc.CallOption) (PdfProcessor_ConvertPdfToImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PdfProcessor_serviceDesc.Streams[0], "/processor.PdfProcessor/ConvertPdfToImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &pdfProcessorConvertPdfToImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PdfProcessor_ConvertPdfToImageClient interface {
	Recv() (*Image, error)
	grpc.ClientStream
}

type pdfProcessorConvertPdfToImageClient struct {
	grpc.ClientStream
}

func (x *pdfProcessorConvertPdfToImageClient) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pdfProcessorClient) RotateImage(ctx context.Context, in *Rotate, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/processor.PdfProcessor/RotateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdfProcessorClient) CreatePdf(ctx context.Context, in *Document, opts ...grpc.CallOption) (*Pdf, error) {
	out := new(Pdf)
	err := c.cc.Invoke(ctx, "/processor.PdfProcessor/CreatePdf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PdfProcessorServer is the server API for PdfProcessor service.
type PdfProcessorServer interface {
	// Convert the pages of a PDF file to images.
	ConvertPdfToImage(*Pdf, PdfProcessor_ConvertPdfToImageServer) error
	// Rotate an image
	RotateImage(context.Context, *Rotate) (*Image, error)
	// Create a Pdf
	CreatePdf(context.Context, *Document) (*Pdf, error)
}

// UnimplementedPdfProcessorServer can be embedded to have forward compatible implementations.
type UnimplementedPdfProcessorServer struct {
}

func (*UnimplementedPdfProcessorServer) ConvertPdfToImage(req *Pdf, srv PdfProcessor_ConvertPdfToImageServer) error {
	return status.Errorf(codes.Unimplemented, "method ConvertPdfToImage not implemented")
}
func (*UnimplementedPdfProcessorServer) RotateImage(ctx context.Context, req *Rotate) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateImage not implemented")
}
func (*UnimplementedPdfProcessorServer) CreatePdf(ctx context.Context, req *Document) (*Pdf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePdf not implemented")
}

func RegisterPdfProcessorServer(s *grpc.Server, srv PdfProcessorServer) {
	s.RegisterService(&_PdfProcessor_serviceDesc, srv)
}

func _PdfProcessor_ConvertPdfToImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pdf)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PdfProcessorServer).ConvertPdfToImage(m, &pdfProcessorConvertPdfToImageServer{stream})
}

type PdfProcessor_ConvertPdfToImageServer interface {
	Send(*Image) error
	grpc.ServerStream
}

type pdfProcessorConvertPdfToImageServer struct {
	grpc.ServerStream
}

func (x *pdfProcessorConvertPdfToImageServer) Send(m *Image) error {
	return x.ServerStream.SendMsg(m)
}

func _PdfProcessor_RotateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rotate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdfProcessorServer).RotateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/processor.PdfProcessor/RotateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdfProcessorServer).RotateImage(ctx, req.(*Rotate))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdfProcessor_CreatePdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Document)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdfProcessorServer).CreatePdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/processor.PdfProcessor/CreatePdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdfProcessorServer).CreatePdf(ctx, req.(*Document))
	}
	return interceptor(ctx, in, info, handler)
}

var _PdfProcessor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "processor.PdfProcessor",
	HandlerType: (*PdfProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RotateImage",
			Handler:    _PdfProcessor_RotateImage_Handler,
		},
		{
			MethodName: "CreatePdf",
			Handler:    _PdfProcessor_CreatePdf_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConvertPdfToImage",
			Handler:       _PdfProcessor_ConvertPdfToImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/processor.proto",
}
