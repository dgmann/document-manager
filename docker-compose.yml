version: '3'
services:
  api:
    image: 'ghcr.io/dgmann/document-manager/api:latest'
    volumes:
      - 'archive:/archive'
      - 'records:/records'
    networks:
      - backend
    environment:
      DB_HOST: db
      DB_NAME: manager
      PDFPROCESSOR_URL: 'processor:9000'
    depends_on:
      - db
      - processor
    restart: always
  app:
    image: 'ghcr.io/dgmann/document-manager/app:latest'
    networks: 
      - backend
    environment:
      API_HOST: localhost
      ENABLE_SSL: 'false'
    restart: always
  db:
    image: 'mongo:latest'
    volumes:
      - 'mongo:/data/db'
    networks:
      - backend
    restart: always
  mqtt:
    image: emqx:latest
  ocr:
    image: 'ghcr.io/dgmann/document-manager/ocr:latest'
    networks:
      - backend
    restart: always
    environment:
      MQTT_BOKER: "mqtt:1883"
  fax_watcher:
    image: 'ghcr.io/dgmann/document-manager/directory-watcher:latest'
    volumes:
      - 'fax:/records'
    networks:
      - backend
    environment:
      DESTINATION: 'http://api/api'
      PARSER: fax
    depends_on:
      - api
    restart: always
  gateway:
    image: 'ghcr.io/dgmann/document-manager/gateway:latest'
    ports:
      - '80:80'
    networks:
      - backend
    depends_on:
      - api
      - app
      - m1-adapter
    restart: always
  m1-adapter:
    image: 'ghcr.io/dgmann/document-manager/m1-adapter:latest'
    networks:
      - backend
    restart: always
  migrator:
    image: 'ghcr.io/dgmann/document-manager/migrator:latest'
    volumes:
      - migrator-data
      - migrator-records
    ports:
      - '8080:8080'
    networks:
      - backend
    environment:
      API_URL: 'http://api/api'
      DB_HOST: mssql
      DB_NAME: PdfDatabase
      DB_PASSWORD: demo
      DB_USER: migration
    depends_on:
      - api
    restart: always
  processor:
    image: 'ghcr.io/dgmann/document-manager/pdf-processor:latest'
    networks:
      - backend
    restart: always
  scan_watcher:
    image: 'ghcr.io/dgmann/document-manager/directory-watcher:latest'
    volumes:
      - 'scans:/records'
    networks:
      - backend
    environment:
      DESTINATION: 'http://api/api'
      PARSER: generic
      SENDER: Scan
    depends_on:
      - api
    restart: always
volumes:
  archive: {}
  fax: {}
  migrator-data: {}
  migrator-records: {}
  mongo: {}
  records: {}
  scans: {}
networks:
  backend: {}
