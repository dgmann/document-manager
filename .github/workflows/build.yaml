name: Build

on:
  workflow_call:
    inputs:
      tag:
        required: false
        type: string
        description: "A Tag for publishing the artifacts"
    outputs:
      artifact-id:
        description: "Name of the artifact which can be used with the REST API"
        value: ${{ jobs.upload_artifacts.outputs.artifact-id }}
      artifact-name:
        description: "Name of the artifact which can be used to download it"
        value: artifacts
  workflow_dispatch:
    inputs:
      tag:
        required: true
        type: string
        description: "A Tag for publishing the artifacts"
  pull_request:

env:
  IMAGE_REPOSITORY: "dgmann/document-manager"
  IMAGE_REGISTRY: "ghcr.io"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
  
jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.generate.outputs.targets }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: List targets
        id: generate
        uses: docker/bake-action/subaction/list-targets@v4
        with:
          target: default

  build:
    runs-on: ubuntu-latest
    needs:
      - prepare
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.prepare.outputs.targets) }}
        include:
          - push: true
          - target: m1-helper
            push: false
            upload-path: 'out/*'
          - target: cli
            push: false
            upload-path: 'out/*'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Use PAT to allow dgmann/document-manager as namespace


      - name: Image Name
        id: image-name
        run: echo "image-name=${IMAGE_REGISTRY}/${IMAGE_REPOSITORY}/${IMAGE_NAME}" >> "$GITHUB_OUTPUT"
        env:
          IMAGE_NAME: ${{ matrix.target }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.image-name.outputs.image-name }}
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=pr
            type=raw,enable=${{ inputs.tag != '' }},value=${{ inputs.tag }}
            type=raw,value=latest,enable=${{ inputs.tag != '' }}

      - name: Build and push
        uses: docker/bake-action@v4
        with:
          push: ${{ matrix.push }}
          targets: ${{ matrix.target }}
          files: |
            docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max
            *.args.SERVICE_VERSION=${{ env.DOCKER_METADATA_OUTPUT_VERSION }}

      - name: Upload
        uses: actions/upload-artifact@v4
        if: matrix.upload-path != ''
        with:
          name: output-${{ matrix.target }}
          path: ${{ matrix.upload-path }}
  
  upload_artifacts:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      artifact-id: ${{ steps.artifact.outputs.artifact-id }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.tag }}
    
    - name: Create docker-compose.yaml
      run: |
        mkdir out
        envsubst '${DOCUMENT_MANAGER_VERSION}' < deployment/docker-compose.yml > out/docker-compose.yaml
      env:
        DOCUMENT_MANAGER_VERSION: ${{ inputs.tag || github.ref_name }}

    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: out
        pattern: output-*
        merge-multiple: true

    - uses: actions/upload-artifact@v4
      id: artifact
      with:
        name: artifacts
        path: out/*
