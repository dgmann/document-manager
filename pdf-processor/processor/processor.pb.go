// Code generated by protoc-gen-go. DO NOT EDIT.
// source: processor.proto

package processor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Pdf struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pdf) Reset()         { *m = Pdf{} }
func (m *Pdf) String() string { return proto.CompactTextString(m) }
func (*Pdf) ProtoMessage()    {}
func (*Pdf) Descriptor() ([]byte, []int) {
	return fileDescriptor_processor_1483e35a357b5e66, []int{0}
}
func (m *Pdf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pdf.Unmarshal(m, b)
}
func (m *Pdf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pdf.Marshal(b, m, deterministic)
}
func (dst *Pdf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pdf.Merge(dst, src)
}
func (m *Pdf) XXX_Size() int {
	return xxx_messageInfo_Pdf.Size(m)
}
func (m *Pdf) XXX_DiscardUnknown() {
	xxx_messageInfo_Pdf.DiscardUnknown(m)
}

var xxx_messageInfo_Pdf proto.InternalMessageInfo

func (m *Pdf) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type Image struct {
	Format               string   `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_processor_1483e35a357b5e66, []int{1}
}
func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (dst *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(dst, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *Image) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*Pdf)(nil), "processor.Pdf")
	proto.RegisterType((*Image)(nil), "processor.Image")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PdfProcessorClient is the client API for PdfProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PdfProcessorClient interface {
	// Convert the pages of a PDF file to images.
	//
	// Convert the pages of a PDF file to images.
	ConvertPdfToImage(ctx context.Context, in *Pdf, opts ...grpc.CallOption) (PdfProcessor_ConvertPdfToImageClient, error)
}

type pdfProcessorClient struct {
	cc *grpc.ClientConn
}

func NewPdfProcessorClient(cc *grpc.ClientConn) PdfProcessorClient {
	return &pdfProcessorClient{cc}
}

func (c *pdfProcessorClient) ConvertPdfToImage(ctx context.Context, in *Pdf, opts ...grpc.CallOption) (PdfProcessor_ConvertPdfToImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PdfProcessor_serviceDesc.Streams[0], "/processor.PdfProcessor/ConvertPdfToImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &pdfProcessorConvertPdfToImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PdfProcessor_ConvertPdfToImageClient interface {
	Recv() (*Image, error)
	grpc.ClientStream
}

type pdfProcessorConvertPdfToImageClient struct {
	grpc.ClientStream
}

func (x *pdfProcessorConvertPdfToImageClient) Recv() (*Image, error) {
	m := new(Image)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PdfProcessorServer is the server API for PdfProcessor service.
type PdfProcessorServer interface {
	// Convert the pages of a PDF file to images.
	//
	// Convert the pages of a PDF file to images.
	ConvertPdfToImage(*Pdf, PdfProcessor_ConvertPdfToImageServer) error
}

func RegisterPdfProcessorServer(s *grpc.Server, srv PdfProcessorServer) {
	s.RegisterService(&_PdfProcessor_serviceDesc, srv)
}

func _PdfProcessor_ConvertPdfToImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Pdf)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PdfProcessorServer).ConvertPdfToImage(m, &pdfProcessorConvertPdfToImageServer{stream})
}

type PdfProcessor_ConvertPdfToImageServer interface {
	Send(*Image) error
	grpc.ServerStream
}

type pdfProcessorConvertPdfToImageServer struct {
	grpc.ServerStream
}

func (x *pdfProcessorConvertPdfToImageServer) Send(m *Image) error {
	return x.ServerStream.SendMsg(m)
}

var _PdfProcessor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "processor.PdfProcessor",
	HandlerType: (*PdfProcessorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConvertPdfToImage",
			Handler:       _PdfProcessor_ConvertPdfToImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "processor.proto",
}

func init() { proto.RegisterFile("processor.proto", fileDescriptor_processor_1483e35a357b5e66) }

var fileDescriptor_processor_1483e35a357b5e66 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x28, 0xca, 0x4f,
	0x4e, 0x2d, 0x2e, 0xce, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0xc9, 0x73, 0x31, 0x07, 0xa4, 0xa4, 0x09, 0x49, 0x70, 0xb1, 0x3b, 0xe7, 0xe7, 0x95, 0xa4, 0xe6,
	0x95, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x04, 0xc1, 0xb8, 0x4a, 0x96, 0x5c, 0xac, 0x9e, 0xb9,
	0x89, 0xe9, 0xa9, 0x42, 0x62, 0x5c, 0x6c, 0x6e, 0xf9, 0x45, 0xb9, 0x89, 0x10, 0x15, 0x9c, 0x41,
	0x50, 0x1e, 0xb2, 0x56, 0x26, 0x14, 0xad, 0x46, 0x9e, 0x5c, 0x3c, 0x01, 0x29, 0x69, 0x01, 0x30,
	0xbb, 0x84, 0x2c, 0xb9, 0x04, 0x9d, 0xf3, 0xf3, 0xca, 0x52, 0x8b, 0x4a, 0x02, 0x52, 0xd2, 0x42,
	0xf2, 0x21, 0xc6, 0xf2, 0xe9, 0x21, 0x5c, 0x17, 0x90, 0x92, 0x26, 0x25, 0x80, 0xc4, 0x07, 0xab,
	0x50, 0x62, 0x30, 0x60, 0x4c, 0x62, 0x03, 0x3b, 0xdc, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x0f,
	0x37, 0x7b, 0x19, 0xcb, 0x00, 0x00, 0x00,
}
