version: '3'
services:
  ingress:
    image: "traefik:3.0"
    networks:
      - backend
    restart: unless-stopped
    # Enables the web UI and tells Traefik to listen to Docker
    command: --api.insecure=true --providers.docker
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:80"
      - "8080:8080"

  db:
    image: 'mongo:6'
    volumes:
      - 'mongo:/data/db'
    networks:
      - backend
    restart: unless-stopped
  mqtt:
    image: emqx:latest
    volumes:
      - emqx-data:/opt/emqx/data
      - emqx-etc:/opt/emqx/etc
      - emqx-log:/opt/emqx/log
    networks:
      - backend
    environment:
      EMQX_MQTT__MAX_MQUEUE_LEN: "infinity"
      EMQX_FORCE_SHUTDOWN__MAX_HEAP_SIZE: "200MB" # Default is 32MB. Higher heap size allows mqueue to grow larger. Can be tuned to fit the system
    labels:
      - "traefik.http.routers.mqtt-ui.service=mqtt-ui"
      - traefik.http.routers.mqtt-ui.rule=HostRegexp(`^mqtt\..+`)
      - "traefik.http.services.mqtt-ui.loadbalancer.server.port=18083"

      - "traefik.http.routers.mqtt-ws.service=mqtt-ws"
      - "traefik.http.routers.mqtt-ws.rule=PathPrefix(`/mqtt`)"
      - "traefik.http.services.mqtt-ws.loadbalancer.server.port=8083"

  api:
    image: 'ghcr.io/dgmann/document-manager/api:${DOCUMENT_MANAGER_VERSION}'
    volumes:
      - 'archive:/archive'
      - 'records:/records'
    networks:
      - backend
    environment:
      DB_HOST: db
      DB_NAME: manager
      PDFPROCESSOR_URL: 'processor:9000'
      MQTT_BROKER: 'mqtt://mqtt:1883'
    depends_on:
      - db
      - mqtt
      - processor
    restart: unless-stopped
    labels:
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
  app:
    image: 'ghcr.io/dgmann/document-manager/app:${DOCUMENT_MANAGER_VERSION}'
    networks: 
      - backend
    environment:
      API_HOST: ${API_HOST:-}
      ENABLE_SSL: ${ENABLE_SSL:-false}
    restart: unless-stopped
    labels:
      - "traefik.http.routers.app.rule=PathPrefix(`/`)"
  ocr:
    image: 'ghcr.io/dgmann/document-manager/ocr:${DOCUMENT_MANAGER_VERSION}'
    networks:
      - backend
    depends_on:
      - api
      - mqtt
    restart: unless-stopped
    environment:
      MQTT_BROKER: 'mqtt://mqtt:1883'
      API_URL: 'http://api/api'
    labels:
      - "traefik.http.routers.ocr.rule=PathPrefix(`/ocr`)"
      - "traefik.http.middlewares.stripprefix.stripprefix.prefixes=/ocr"
      - traefik.http.routers.ocr.middlewares=stripprefix@docker
      - traefik.http.services.ocr.loadbalancer.server.port=8080
      - traefik.http.routers.ocr.service=ocr
  processor:
    image: 'ghcr.io/dgmann/document-manager/pdf-processor:${DOCUMENT_MANAGER_VERSION}'
    networks:
      - backend
    restart: unless-stopped
    environment:
      - EXTRACTOR=pdfcpu

  m1-adapter:
    image: 'ghcr.io/dgmann/document-manager/m1-adapter:${DOCUMENT_MANAGER_VERSION}'
    networks:
      - backend
    restart: unless-stopped
    environment:
      - DB_USERNAME=${M1_DB_USERNAME}
      - DB_PASSWORD=${M1_DB_PASSWORD}
      - DB_HOST=${M1_DB_HOST}
    labels:
      - traefik.http.routers.patients.rule=PathRegexp(`^/api/patients(/[\d]*)?$$`)
      - traefik.http.middlewares.patient.replacepathregex.regex=^/api/patients(/[\d]*)?
      - traefik.http.middlewares.patient.replacepathregex.replacement=/patients$$1
      - traefik.http.routers.patients.middlewares=patient@docker
      - traefik.http.services.patient.loadbalancer.server.port=8080
      - traefik.http.routers.patients.service=patient

  scan_watcher:
    image: 'ghcr.io/dgmann/document-manager/directory-watcher:${DOCUMENT_MANAGER_VERSION}'
    volumes:
      - 'scans:/records'
    networks:
      - backend
    environment:
      DESTINATION: 'http://api/api'
      PARSER: generic
      SENDER: Scan
    depends_on:
      - api
    restart: unless-stopped
  fax_watcher:
    image: 'ghcr.io/dgmann/document-manager/directory-watcher:${DOCUMENT_MANAGER_VERSION}'
    volumes:
      - 'fax:/records'
    networks:
      - backend
    environment:
      DESTINATION: 'http://api/api'
      PARSER: fax
    depends_on:
      - api
    restart: unless-stopped

volumes:
  archive: {}
  fax: {}
  mongo: {}
  records: {}
  scans: {}
  emqx-data: {}
  emqx-etc: {}
  emqx-log: {}

networks:
  backend: {}
